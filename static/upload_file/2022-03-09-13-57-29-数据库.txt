结构化查询语言 sql 关系型数据库管理系统
每个列都不可以再拆分
一范式的基础上，只依赖主键，不依赖其他非主键
二范式基础上，非主键只依赖于主键，不依赖于其他非主键

statement，每一条会修改数据的sql记录记在binlog中。
row ，不记录sql语句上的上下文相关信息，仅保存哪条记录被修改
mixed 

int float double year time date datetime char varchar tinyblob 
对于经常变更的数据，char比varchar好，不容易产生碎片
非常短的列，char比varchar更好

timestamp 日期和时间类型尽量使用timestamp 空间效率高

不需要sql层的解析，所以性能非常高
基于键值对，数据之间没有耦合性，所以非常容易水平扩展

sql可以在一个表或几个表之间做非常复杂的数据查询
使得对于安全性能很高的数据访问得以实现

sql语言共分为四大类

数据查询语言 dql
数据操纵语言 dml
数据控制
数据定义

grant；
sql》rollback；
commit work

索引是数据库管理系统中一个排序的数据结构，B树，B+树
快速查询，更新数据表中数据
增加了数据库的存储空间
在插入和修改数据时要花更多的时间

创建数据库索引可以保证数据库表中每一行数据的唯一性	
大大加快数据的检索速度
加速表和表之间的连接，
在使用分组和排序子句进行设计检索时，可以显著减少查询中分组和排序的时间
在查询的过程中，使用优化隐藏器，提高系统的性能。

创建索引和维护索引需要时间，随着数据量的增加而增加
消耗物理空间
降低数据的维护速度

在经常要搜索的列上建立索引
主键的列上，
在经常连接的列上，外键
排序的列上
where 语句的列上

很少使用或者参考的列
对于那些定义为text，image，bit数据类型的列也不要建立索引
修改性能远远大于检索性能，不应该创建索引


唯一，不为空，经常被查询的字段

hash索引结构特殊性，检索速率非常高，索引的检索可以一次定位
B+树索引需要从根节点到枝节点，最后才能到叶节点

hash仅仅只能满足 = in  ，不能使用范围查询因为经过相应的hash算法处理之后的hsah值的大小关系、
，并不能保证和hash运算前完全相同

B+树的查询效率更加稳定
B+的磁盘读写代价更低


聚集索引、非聚集索引


事务：对数据库中一系列操作进行统一的回滚或者提交的操作，主要用来保证数据的完整性和一致性
事务的四大特性：
原子性、一致性、隔离性、持久性


脏数据
不可重复读
可重复读
串行化


触发器的作用：
可以强化约束，来维护数据的完整性和一致性
跟踪数据库内的操作而不允许未经许可的更新和变化。

存储过程：
存储过程是预编译的，执行效率高
存储过程的代码存在数据库中，通过存储过程名调用
安全性高，执行存储过程需要一定权限的用户
存储过程可以重复使用，可减少数据库开发人员的工作量

移植性差


视图：
是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增改查，操作，通常是有一个表或多个表的行或列的子集。
对视图的修改会改变基本表，可以使得我们获取数据更容易，相比多表查询。

优点：
加快对数据库的访问，因为视图可以有选择的选取数据库里的一部分
用户通过简单的查询可以从复杂查询中得到结果。
维护数据的独立性，视图可从多个表检索数据
对于相同的表可以产生不同的视图
